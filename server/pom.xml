<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>project-leo-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <name>Project Leo Server</name>
    <description>Project Leo Server</description>

    <parent>
        <?m2e execute onConfiguration,onIncremental?>
        <groupId>org.davincischools.leo</groupId>
        <artifactId>project-leo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>./../pom.xml</relativePath>
    </parent>

    <properties>
        <clients.directory>${basedir}/src/main/clients</clients.directory>
        <npm.binary.directory>${project.build.directory}/org.davincischools.leo/npm
        </npm.binary.directory>
        <proto.version>3.24.4</proto.version>
        <surefire.version>3.2.1</surefire.version>
    </properties>

    <dependencies>
        <!-- Spring framework. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <version>${spring.boot.starter.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring.boot.starter.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring.boot.starter.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.json</groupId>
                    <artifactId>json</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.vaadin.external.google</groupId>
                    <artifactId>android-json</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <!-- Needed to proxy services to React web server. -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webflux</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>

        <!-- Parse command line options. -->
        <dependency>
            <groupId>com.beust</groupId>
            <artifactId>jcommander</artifactId>
            <version>1.82</version>
        </dependency>

        <!-- Protocol Buffers in Java. -->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>${proto.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java-util</artifactId>
            <version>${proto.version}</version>
        </dependency>

        <!-- Project Leo -->
        <dependency>
            <groupId>org.davincischools.leo</groupId>
            <artifactId>project-leo-database</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <!-- HttpClient to send requests to OpenAI. -->
        <dependency>
            <groupId>io.projectreactor.netty</groupId>
            <artifactId>reactor-netty-http</artifactId>
            <version>1.1.13</version>
        </dependency>

        <!-- Google Cloud APIs. -->
        <dependency>
            <groupId>com.google.api-client</groupId>
            <artifactId>google-api-client</artifactId>
            <version>2.2.0</version>
        </dependency>

        <!-- Google partner to send e-mail. -->
        <dependency>
            <groupId>com.mailjet</groupId>
            <artifactId>mailjet-client</artifactId>
            <version>5.2.4</version>
        </dependency>

        <!-- OpenAI API. -->
        <dependency>
            <groupId>com.theokanning.openai-gpt3-java</groupId>
            <artifactId>service</artifactId>
            <version>0.16.1</version>
        </dependency>
        <dependency>
            <groupId>com.theokanning.openai-gpt3-java</groupId>
            <artifactId>api</artifactId>
            <version>0.16.1</version>
        </dependency>

    </dependencies>

    <build>
        <testResources>
            <testResource>
                <directory>src/main/resources</directory>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <!-- A workaround for M2E. It doesn't recognize extensions.
                     See: https://github.com/trustin/os-maven-plugin#issues-with-eclipse-m2e-or-other-ides -->
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.1</version>
                <executions>
                    <execution>
                        <?m2e execute onConfiguration,onIncremental?>
                        <phase>initialize</phase>
                        <goals>
                            <goal>detect</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Add generated source folders. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <?m2e execute onConfiguration,onIncremental?>
                        <id>add-java-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <!-- See note in 'generate-protobuf-java' for
                                     why we add this folder. -->
                                <source>${project.build.sourceDirectory}/../generated/java</source>
                                <source>${project.build.sourceDirectory}/../resources</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Build the spring web server. -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.starter.version}</version>
            </plugin>

            <!-- Build the browser client. -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.12.1</version>
                <executions>
                    <!-- Install node executable. -->
                    <execution>
                        <?m2e execute onConfiguration?>
                        <id>install-node-and-npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <skip>${settings.offline}</skip>
                        </configuration>
                    </execution>

                    <!-- Install npm. -->
                    <execution>
                        <?m2e execute onConfiguration?>
                        <id>npm-install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <skip>${settings.offline}</skip>
                            <arguments>install --ignore-scripts</arguments>
                        </configuration>
                    </execution>

                    <!-- Audit npm configuration. -->
                    <execution>
                        <?m2e ignore?>
                        <id>npm-audit</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <skip>${settings.offline}</skip>
                            <arguments>audit --omit=dev --audit-level=high</arguments>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <!-- NOTE: nodeVersion need to remain in sync with
                         the versions in web-browser/package.json, commented
                         there. -->
                    <nodeVersion>v18.18.2</nodeVersion>
                    <installDirectory>${npm.binary.directory}</installDirectory>
                    <workingDirectory>${clients.directory}/web-browser</workingDirectory>
                    <environmentVariables>
                        <revision>0.0.1-SNAPSHOT</revision>
                    </environmentVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <!-- Make Protocol Buffer destination dirs. -->
                    <execution>
                        <?m2e execute onConfiguration,onIncremental?>
                        <id>make-protobuf-dirs</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <target>
                                <mkdir dir="${clients.directory}/web-browser/modules/pl-pb/src"/>
                                <mkdir dir="${clients.directory}/web-browser/modules/pl-pb/types"/>
                                <mkdir dir="${project.build.sourceDirectory}/../generated/java"/>
                            </target>
                        </configuration>
                    </execution>
                    <!-- Compile Protocol Buffers for JavaScript. -->
                    <execution>
                        <?m2e execute onConfiguration,onIncremental?>
                        <id>generate-protobuf-javascript</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>generate-sources</phase>
                        <configuration>
                            <target>
                                <!-- Compile Protocol Buffers to JavaScript. -->
                                <property environment="env"/>
                                <apply executable="${npm.binary.directory}/node/npx"
                                        dir="${clients.directory}/web-browser" failonerror="true"
                                        parallel="true" skipemptyfilesets="true">
                                    <env key="PATH"
                                            path="${npm.binary.directory}/node:${env.PATH}"/>
                                    <env key="CI" value="true"/>
                                    <arg value="pbjs"/>
                                    <arg line="--target static-module"/>
                                    <arg line="--wrap commonjs"/>
                                    <arg value="--force-long"/>
                                    <arg value="--null-defaults"/>
                                    <arg value="--out"/>
                                    <arg file="${clients.directory}/web-browser/modules/pl-pb/src/protobuf-js.js"/>
                                    <fileset dir="${project.build.sourceDirectory}/../protos"
                                            includes="**/*.proto"/>
                                </apply>
                                <!-- Create TypeScript from JavaScript. -->
                                <exec executable="${npm.binary.directory}/node/npx"
                                        dir="${clients.directory}/web-browser" failonerror="true">
                                    <env key="PATH"
                                            path="${npm.binary.directory}/node:${env.PATH}"/>
                                    <env key="CI" value="true"/>
                                    <arg value="pbts"/>
                                    <arg value="--out"/>
                                    <arg file="${clients.directory}/web-browser/modules/pl-pb/types/protobuf-js.d.ts"/>
                                    <arg file="${clients.directory}/web-browser/modules/pl-pb/src/protobuf-js.js"/>
                                </exec>
                            </target>
                        </configuration>
                    </execution>

                    <!-- Format & Lint web files. -->
                    <execution>
                        <?m2e ignore?>
                        <id>format-lint-web-files</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>process-sources</phase>
                        <configuration>
                            <target>
                                <property environment="env"/>
                                <apply executable="${npm.binary.directory}/node/npx"
                                        dir="${clients.directory}/web-browser" failonerror="true"
                                        parallel="true" skipemptyfilesets="true"
                                        output="${project.build.directory}/eslint-output.xml"
                                        error="${project.build.directory}/eslint-output.xml.error.txt">
                                    <env key="PATH"
                                            path="${npm.binary.directory}/node:${env.PATH}"/>
                                    <env key="CI" value="true"/>
                                    <arg value="eslint"/>
                                    <arg value="--fix"/>
                                    <arg value="--format"/>
                                    <arg value="checkstyle"/>
                                    <fileset dir="${clients.directory}" erroronmissingdir="false">
                                        <include name="**/*.js"/>
                                        <include name="**/*.jsx"/>
                                        <include name="**/*.ts"/>
                                        <include name="**/*.tsx"/>
                                        <include name="**/.*.js"/>
                                        <include name="**/.*.jsx"/>
                                        <include name="**/.*.ts"/>
                                        <include name="**/.*.tsx"/>
                                        <exclude name="*/node_modules/**/*"/>
                                        <exclude name="*/modules/pl-pb/src/**/*"/>
                                        <exclude name="*/modules/pl-pb/types/**/*"/>
                                        <exclude name="*/build/**/*"/>
                                        <exclude name="*/.prettierrc.js"/>
                                    </fileset>
                                </apply>

                                <apply executable="${npm.binary.directory}/node/npx"
                                        dir="${clients.directory}/web-browser" failonerror="true"
                                        parallel="true" skipemptyfilesets="true"
                                        output="${project.build.directory}/stylelint-output.xml"
                                        error="${project.build.directory}/stylelint-output.xml.error.txt">
                                    <env key="PATH"
                                            path="${npm.binary.directory}/node:${env.PATH}"/>
                                    <env key="CI" value="true"/>
                                    <arg value="stylelint"/>
                                    <arg value="--fix"/>
                                    <arg value="--custom-formatter"/>
                                    <arg value="./node_modules/stylelint-checkstyle-formatter"/>
                                    <fileset dir="${clients.directory}" erroronmissingdir="false">
                                        <include name="**/*.css"/>
                                        <include name="**/*.scss"/>
                                        <exclude name="*/node_modules/**/*"/>
                                        <exclude name="*/build/**/*"/>
                                    </fileset>
                                </apply>
                            </target>
                        </configuration>
                    </execution>

                    <!-- Build the React web app. -->
                    <execution>
                        <?m2e ignore?>
                        <id>build-web-browser-client</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>compile</phase>
                        <configuration>
                            <target>
                                <property environment="env"/>
                                <exec executable="${npm.binary.directory}/node/npm"
                                        dir="${clients.directory}/web-browser" failonerror="true">
                                    <env key="PATH"
                                            path="${npm.binary.directory}/node:${env.PATH}"/>
                                    <env key="CI" value="true"/>
                                    <arg value="run"/>
                                    <arg value="build"/>
                                </exec>
                            </target>
                        </configuration>
                    </execution>

                    <!-- Copy compiled React web app to the classpath for serving. -->
                    <execution>
                        <?m2e ignore?>
                        <id>copy-web-browser-client</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>compile</phase>
                        <configuration>
                            <target>
                                <copy todir="${project.build.outputDirectory}/org/davincischools/leo/server/www">
                                    <fileset dir="${clients.directory}/web-browser/build/"/>
                                </copy>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Compile Protocol Buffers for Java.

                 Unfortunately, VS Code seems to delete
                 target/generated-sources/java when we don't want it to, which
                 breaks the build. So, we store the generated java code in
                 src/main/generated/java and mark that directory as ignored by
                 git. -->
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
                <version>0.6.1</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <?m2e execute onConfiguration,onIncremental?>
                        <id>generate-protobuf-java</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <phase>generate-sources</phase>
                        <configuration>
                            <protocArtifact>
                                com.google.protobuf:protoc:${proto.version}:exe:${os.detected.classifier}
                            </protocArtifact>
                            <protoSourceRoot>${project.build.sourceDirectory}/../protos
                            </protoSourceRoot>
                            <outputDirectory>${project.build.sourceDirectory}/../generated/java
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Run the vintage JUnit 4 tests. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>${surefire.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Delete additional files for mvn clean. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <filesets>
                        <fileset erroronmissingdir="false" followsymlinks="false"
                                defaultexcludes="false">
                            <directory>${clients.directory}</directory>
                            <includes>
                                <include>*/build/**/*</include>
                                <include>*/coverage/**/*</include>
                                <include>*/node_modules/**/*</include>
                                <include>*/package-lock.json</include>
                                <include>*/modules/pl-pb/src/**/*</include>
                                <include>*/modules/pl-pb/types/**/*</include>
                            </includes>
                        </fileset>
                        <fileset erroronmissingdir="false" followsymlinks="false"
                                defaultexcludes="false">
                            <directory>${project.build.sourceDirectory}/..</directory>
                            <includes>
                                <include>generated/**/*</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!-- Create an executable JAR. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.5.0</version>
                <executions>
                    <execution>
                        <?m2e ignore?>
                        <id>copy maven dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${project.build.directory}/project-leo-server-dependencies
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>org.davincischools.leo.server.ServerApplication</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>project-leo-server-dependencies/</classpathPrefix>
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                        <manifestEntries>
                            <mode>development</mode>
                            <url>https://github.com/DaVinciSchools/leo</url>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
