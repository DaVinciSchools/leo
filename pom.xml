<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.davincischools.leo</groupId>
    <artifactId>project-leo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <url>https://github.com/DaVinciSchools/leo</url>
    <packaging>pom</packaging>

    <name>Project Leo</name>
    <description>Project Leo</description>

    <modules>
        <module>database</module>
        <module>server</module>
    </modules>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring.boot.version>3.1.0</spring.boot.version>
        <spring.boot.starter.version>3.1.0</spring.boot.starter.version>
        <spring.framework.version>6.0.9</spring.framework.version>
        <google.truth.version>1.1.3</google.truth.version>
    </properties>

    <dependencies>
        <!-- Libraries of useful functions. -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>31.1-jre</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.23.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>1.10.0</version>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.5.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>

        <!-- MySQL -->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${spring.boot.starter.version}</version>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.0.33</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.2.3.Final</version>
        </dependency>

        <!-- Google's java formatter. -->
        <dependency>
            <groupId>com.google.googlejavaformat</groupId>
            <artifactId>google-java-format</artifactId>
            <version>1.17.0</version>
            <scope>compile</scope>
        </dependency>

        <!-- JUnit/Junit-Jupiter testing. -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <!-- This needs to be "compile" scope because of the test database
                 that is spun up when run without a database specified. -->
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.0-M1</version>
            <scope>test</scope>
        </dependency>

        <!-- Assertions using Truth. -->
        <dependency>
            <groupId>com.google.truth</groupId>
            <artifactId>truth</artifactId>
            <version>${google.truth.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.truth.extensions</groupId>
            <artifactId>truth-proto-extension</artifactId>
            <version>${google.truth.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.truth.extensions</groupId>
            <artifactId>truth-java8-extension</artifactId>
            <version>${google.truth.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Spring testing. -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.framework.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- Logging -->
        <!-- This is built into Spring. So we must use it if we don't want to
             incorporate excludes in dependencies. -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.7</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.7</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Delete additional files for mvn clean. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <filesets>
                        <fileset erroronmissingdir="false" followsymlinks="false" defaultexcludes="false">
                            <directory>${basedir}</directory>
                            <includes>
                                <include>bin/git-hooks/**/*.tmp/</include>
                                <include>bin/git-hooks/**/*.tmp</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <!-- Format Java code using the Google Java formatter. -->
                    <execution>
                        <id>format-java-files</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <target>
                                <apply executable="java" failonerror="true" failifexecutionfails="true" parallel="true" skipemptyfilesets="true" force="true" verbose="true">
                                    <arg value="-classpath"/>
                                    <arg pathref="maven.compile.classpath"/>
                                    <arg line="--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED"/>
                                    <arg line="--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED"/>
                                    <arg line="--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"/>
                                    <arg line="--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED"/>
                                    <arg line="--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"/>
                                    <arg value="com.google.googlejavaformat.java.Main"/>
                                    <arg value="--replace"/>
                                    <fileset dir="${project.build.sourceDirectory}" includes="**/*.java" erroronmissingdir="false"/>
                                    <fileset dir="${project.build.testSourceDirectory}" includes="**/*.java" erroronmissingdir="false"/>
                                    <fileset dir="${project.build.directory}" includes="**/*.java" erroronmissingdir="false"/>
                                </apply>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Set default compiler parameters. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <compilerArgs>
                        <arg>-Xlint:all</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
